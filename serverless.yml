service: Story-user

provider:
  name: aws
  region: eu-west-2
  runtime: nodejs6.10
  apiKeys:
    - token
  stage: dev
  profile: serverless

plugins:
  - serverless-plugin-typescript  # compile our handlers
  - serverless-offline            # enjoy a local dev enc 
  - serverless-aws-documentation  # generate documentation on deploy
  - serverless-domain-manager     # serve API gateway from our own domain
  - upload_spec                   # upload spec to S3 after deployment

package:
  exclude:
    - .gitignore
    - .git/**

# We create a proxy resource which serves the swagger spec directly from S3
resources:
  Resources:

    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: Story User Service

    ProxyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        PathPart: spec 
        RestApiId:
          Ref: ApiGatewayRestApi
          
    ProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ResourceId:
          Ref: ProxyResource
        RestApiId:
          Ref: ApiGatewayRestApi
        HttpMethod: GET 
        AuthorizationType: NONE
        MethodResponses:
          - StatusCode: 200
            ResponseParameters: 
              method.response.header.Access-Control-Allow-Origin: true
        Integration:
          IntegrationHttpMethod: GET
          Type: HTTP
          Uri: https://s3.eu-west-2.amazonaws.com/Story-specs/${self:service}.json
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Access-Control-Allow-Origin : "'*'"

functions:

  create:
    handler: handlers/create.index
    environment:
      SENDGRID_API_KEY: ${file(keys.yml):SENDGRID_API_KEY}
    events:
      - http:
          path: /
          method: post
          cors: true
          documentation:
            summary: "Create a new Story user"
            tags: 
              - user
            requestBody:
              description: "JSON body containing the new user's name and email address."
            requestModels:
                "application/json": "CreateUserRequest"
            methodResponses:
              - statusCode: "200"
                description: "Returned after the user has successfully been created"
                responseModels:
                  "application/json": "CreateUserResponse"
              - statusCode: "409"
                description: "Triggered when the email address has already been used to register for CENTURY."
                responseModels:
                  "application/json": "APIError"
              - statusCode: "422"
                description: "Triggered if any user fields fail validation."
                responseModels:
                  "application/json": "APIError"
              - statusCode: "500"
                description: "Triggered if something else goes wrong on the server."
                responseModels:
                  "application/json": "APIError"

custom:
  customDomain:
    domainName: api.axontoken.com
    basePath: user
    stage: ${self:provider.stage}
    createRoute53Record: true

  documentation: ${file(docs.yml)}

  spec_bucket: Story-specs
